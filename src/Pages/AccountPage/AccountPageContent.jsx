import React, { useState, useEffect } from "react";
import Cookies from "js-cookie"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–∫–∞–º–∏
import styles from "./AccountPage.module.css";

const AccountPageContent = () => {
  const [accounts, setAccounts] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isTransferModalOpen, setIsTransferModalOpen] = useState(false);
  const [formData, setFormData] = useState({
    accountName: "",
    currency: "USD",
    summa: 0,
  });
  const [transferData, setTransferData] = useState({
    fromAccountId: null,
    toAccountId: null,
    transferAmount: 0,
  });
  const personId = Cookies.get("personId"); // –ü–æ–ª—É—á–∞–µ–º personId –∏–∑ –∫—É–∫–æ–≤

  const fetchAccounts = async () => {
    console.log("Fetching accounts for personId:", personId);
    try {
      const response = await fetch(
        `http://localhost:8080/accounts/${personId}`
      );
      const data = await response.json();
      console.log("Fetched accounts:", data);
      setAccounts(data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç–æ–≤:", error);
    }
  };

  const handleAddClick = () => {
    console.log("Opening modal to add account");
    setFormData({
      accountName: "",
      currency: "USD",
      summa: 0,
    });
    setIsModalOpen(true);
  };

  const handleEditClick = (account) => {
    console.log("Opening modal to edit account:", account);
    setFormData({
      accountName: account.accountName,
      currency: account.currency,
      summa: account.summa,
    });
    setIsModalOpen(true);
  };

  const handleDeleteClick = async (accountId) => {
    console.log("Deleting account with ID:", accountId);
    try {
      const response = await fetch(
        `http://localhost:8080/accounts/deleteAccount?accountId=${accountId}`, // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ @RequestParam
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
        }
      );

      if (response.ok) {
        alert("–°—á–µ—Ç —É–¥–∞–ª–µ–Ω!");
        fetchAccounts();
      } else {
        const errorData = await response.text();
        alert(`–û—à–∏–±–∫–∞: ${errorData || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç"}`);
      }
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞!");
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞:", error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    console.log("Submitting account form with data:", formData);

    const url = formData.accountId
      ? `http://localhost:8080/accounts/updateAccount`
      : `http://localhost:8080/accounts/addAccount`;

    const formDataToSend = new FormData();
    formDataToSend.append("accountName", formData.accountName);
    formDataToSend.append("currency", formData.currency);
    formDataToSend.append("summa", formData.summa);
    formDataToSend.append("personId", personId); // –î–æ–±–∞–≤–ª—è–µ–º personId

    try {
      const response = await fetch(url, {
        method: "POST",
        body: formDataToSend, // –ò—Å–ø–æ–ª—å–∑—É–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      });

      if (response.ok) {
        alert(formData.accountId ? "–°—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!" : "–°—á–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!");
        setIsModalOpen(false);
        fetchAccounts();
      } else {
        const errorData = await response.text();
        alert(`–û—à–∏–±–∫–∞: ${errorData || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—á–µ—Ç"}`);
      }
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞!");
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞:", error);
    }
  };

  const handleTransferSubmit = async (e) => {
    e.preventDefault();

    const url = `http://localhost:8080/accounts/transfer?fromId=${transferData.fromAccountId}&toId=${transferData.toAccountId}&amount=${transferData.transferAmount}`;

    try {
      const response = await fetch(url, {
        method: "POST",
      });

      if (response.ok) {
        alert("–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!");
        setIsTransferModalOpen(false);
        fetchAccounts();
      } else {
        const errorData = await response.text();
        alert(`–û—à–∏–±–∫–∞: ${errorData || "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥"}`);
      }
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞!");
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:", error);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    console.log(`Input changed: ${name} = ${value}`);
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleTransferInputChange = (e) => {
    const { name, value } = e.target;
    console.log(`Transfer input changed: ${name} = ${value}`);
    setTransferData((prev) => ({ ...prev, [name]: value }));
  };

  const handleCloseModal = () => {
    console.log("Closing account modal");
    setIsModalOpen(false);
    setFormData({
      accountName: "",
      currency: "USD",
      summa: 0,
    });
  };

  const handleCloseTransferModal = () => {
    console.log("Closing transfer modal");
    setIsTransferModalOpen(false);
    setTransferData({
      fromAccountId: null,
      toAccountId: null,
      transferAmount: 0,
    });
  };

  useEffect(() => {
    fetchAccounts();
  }, []);

  return (
    <div className={styles.content}>
      <h1 className={styles.contentTitle}>–°–ß–ï–¢–ê</h1>
      <button className={styles.button} onClick={handleAddClick}>
        + –î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç
      </button>
      <button
        className={styles.button}
        onClick={() => setIsTransferModalOpen(true)}
      >
        –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏
      </button>
      <table className={styles.table}>
        <thead>
          <tr>
            <th>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞</th>
            <th>–ï–¥–∏–Ω–∏—Ü–∞ (–≤–∞–ª—é—Ç–∞)</th>
            <th>–°—É–º–º–∞</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {accounts.map((account) => (
            <tr key={account.accountId}>
              <td>{account.accountName}</td>
              <td>{account.currency}</td>
              <td>{account.summa}</td>
              <td>
                <span
                  className={styles.icon}
                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                  onClick={() => handleEditClick(account)}
                >
                  ‚úèÔ∏è
                </span>
                <span
                  className={styles.icon}
                  title="–£–¥–∞–ª–∏—Ç—å"
                  onClick={() => handleDeleteClick(account.accountId)}
                >
                  üóëÔ∏è
                </span>
              </td>
            </tr>
          ))}
          {accounts.length === 0 && (
            <tr>
              <td colSpan="4">–ù–µ—Ç —Å—á–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</td>
            </tr>
          )}
        </tbody>
      </table>

      {isModalOpen && (
        <div className={styles.modal}>
          <div className={styles.modalContent}>
            <h2>
              {formData.accountId ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç" : "–î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç"}
            </h2>
            <form onSubmit={handleSubmit} className={styles.form}>
              <label>
                –ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞:
                <input
                  type="text"
                  name="accountName"
                  value={formData.accountName}
                  onChange={handleInputChange}
                  required
                />
              </label>
              <label>
                –ï–¥–∏–Ω–∏—Ü–∞ (–≤–∞–ª—é—Ç–∞):
                <select
                  name="currency"
                  value={formData.currency}
                  onChange={handleInputChange}
                  required
                >
                  <option value="USD">USD</option>
                  <option value="EUR">EUR</option>
                  <option value="RUB">RUB</option>
                </select>
              </label>
              <label>
                –°—É–º–º–∞:
                <input
                  type="number"
                  name="summa"
                  value={formData.summa}
                  onChange={handleInputChange}
                  required
                />
              </label>
              <div className={styles.modalButtons}>
                <button type="submit" className={styles.button}>
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
                <button
                  type="button"
                  className={styles.button}
                  onClick={handleCloseModal}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {isTransferModalOpen && (
        <div className={styles.modal}>
          <div className={styles.modalContent}>
            <h2>–ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥</h2>
            <form onSubmit={handleTransferSubmit} className={styles.form}>
              <label>
                –°—á–µ—Ç –æ—Ç–∫—É–¥–∞:
                <select
                  name="fromAccountId"
                  value={transferData.fromAccountId}
                  onChange={handleTransferInputChange}
                  required
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç</option>
                  {accounts.map((account) => (
                    <option key={account.accountId} value={account.accountId}>
                      {account.accountName} ({account.currency})
                    </option>
                  ))}
                </select>
              </label>
              <label>
                –°—á–µ—Ç –∫—É–¥–∞:
                <select
                  name="toAccountId"
                  value={transferData.toAccountId}
                  onChange={handleTransferInputChange}
                  required
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç</option>
                  {accounts.map((account) => (
                    <option key={account.accountId} value={account.accountId}>
                      {account.accountName} ({account.currency})
                    </option>
                  ))}
                </select>
              </label>
              <label>
                –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:
                <input
                  type="number"
                  name="transferAmount"
                  value={transferData.transferAmount}
                  onChange={handleTransferInputChange}
                  required
                />
              </label>
              <div className={styles.modalButtons}>
                <button type="submit" className={styles.button}>
                  –ü–µ—Ä–µ–≤–µ—Å—Ç–∏
                </button>
                <button
                  type="button"
                  className={styles.button}
                  onClick={handleCloseTransferModal}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default AccountPageContent;
